(unless (< 25 (car (emacs-ver)))
(ert-deftest when-let-key()
(should (string= "aba" (when-let-key  #'identity ((a "a") (b (concat a "b")))
  (concat b "a"))))
(should (not (when-let-key  #'identity ((a "a") (b nil)) (concat "z" "a"))))
(should (not (when-let-key  #'identity ((c nil) (a "a") (b nil)) (concat "z" "a"))))))

(unless (< 25 (car (emacs-ver)))
(ert-deftest when-let*()
(should (string= "aba" 
   (when-let* ((a "a") (b (concat a "b")))
      (concat b "a"))))
(should (not (when-let* ((a "a") (b)) (concat "z" "a"))))
(should (not (when-let* (c (a "a") b) (concat "z" "a"))))))

(ert-deftest when-let()
  "Testing here when-let and when-let* defined in subr-x.el"
(should (string= "ba" (when-let (a "a") (concat "b" a))))
(should (string= "ba" (when-let ((a "a")) (concat "b" a))))
(should (string= "ba" (when-let ((a "a") (b "b")) (concat b a))))
(should (string= "aba" (when-let ((a "a") (b (concat a "b"))) (concat b "a"))))
(should (string= "aba" (when-let* ((a "a") (b (concat a "b"))) (concat b "a")))))

(ert-deftest if-let*()
  "Testing here if-let* defined in subr-x.el"
:expected-result (if (< 25 (car (emacs-ver))) :passed :failed)
(should (= 1 (if-let* ((a 3)) 1 2)))
(should (= 12 (if-let* ((a 3) (b (* 3 a))) (+ a b) (- a b)))))

(ert-deftest s-find()
  (should (equal '(3 4) (s-find 4 '((1 2) (3 4) (5 6)) #'cadr)))
  (should (= 3 (s-find 3 '(1 2 3 4 5))))
(let ((cumbersome-list '(141 142 143 144)))
  (should (= (s-find (* 12 12) cumbersome-list nil #'=) 144))
  (should (= (s-find (/ 144 2) cumbersome-list nil #'(lambda(x y) (= (* 2 x) y))) 144))
  (should (= (s-find 12 cumbersome-list nil #'(lambda(x y) (= (* x x) y))) 144)))
(let ((cumbersome-list '((141 142) (143 144))))
  (should (equal (s-find 12 cumbersome-list #'cadr #'(lambda(x y) (= y (* x x)))) '(143 144)))))

(ert-deftest select()
(let ((test-list  '(4 22 11 33 12 24 77)))
  (should (not (car (select test-list #'zerop))))
  (should (equal '(11 33 77) (car (select test-list #'oddp))))
  (should (equal '(4 22 12 24) (car (select test-list #'evenp))))))

(ert-deftest without()
(let ((test-list  '(4 22 11 33 12 24 77)))
  (should (equal '(4 22 11 33 77) (without test-list 12 24)))))

(ert-deftest drop()
(let ((test-list  '(4 22 11 33 12 24 77)))
  (drop test-list 12 24)
  (should (equal '(4 22 11 33 77) test-list))))

(ert-deftest define-vars()
(should(string= "(progn (defvar a nil) (defvar b nil))" (string-from-macro '(define-vars (a b)))))
(should(string= "(progn (defvar a 1) (defvar b nil) (defvar c 2))" (string-from-macro '(define-vars ((a 1) b (c 2)))))))

(ert-deftest perms-from-str()
  (should (= 432 (perms-from-str "-rw-rw----"))))

(ert-deftest perms-to-str()
  (should (string= "rw-rw-rwx" (perms-to-str #o667))))

(ert-deftest end-push()
(should (equal '(1)
(let (container)
  (end-push 1 container)
  container)))
(should (equal '(1 2)
(let (container)
  (end-push 1 container)
  (end-push 2 container)
  container))))

(ert-deftest land()
  (should (land '(t t t t 1 2)))
  (should (not (land '(t t t nil 1 2)))))

(ert-deftest mv()
(let ((mv-result (mv "/tmp" "/ptm"))
      (tmp-dir (file-name-as-directory (make-temp-file "elisp-test-mv." t nil))))
(should (and (consp mv-result) (not(car mv-result))))
(let ((fileA (concat tmp-dir "file.A"))
      (fileB (concat tmp-dir "file.B")))
(write-region "1234" nil fileA) (write-region "5678" nil fileB)
(let ((mv-result (mv fileA fileB)))
   (should (and (consp mv-result) (car mv-result) (not (file-exists-p fileA)) (file-exists-p fileB)
   (with-temp-buffer (insert-file-contents fileB)
   (string= "1234" (buffer-substring-no-properties (line-beginning-position) (line-end-position))))))))
(safe-delete-dir tmp-dir t)))

(ert-deftest cp()
(let ((cp-result (cp "/tmp" "/ptm"))
      (tmp-dir (file-name-as-directory (make-temp-file "elisp-test-cp." t nil))))
(should (and (consp cp-result) (not(car cp-result))))
(let ((fileA (concat tmp-dir "file.A"))
      (fileB (concat tmp-dir "file.B")))
(write-region "1234" nil fileA) (write-region "5678" nil fileB)
(let ((cp-result (cp fileA fileB)))
   (should (and (consp cp-result) (car cp-result) (file-exists-p fileA) (file-exists-p fileB)
   (with-temp-buffer (insert-file-contents fileB)
   (string= "1234" (buffer-substring-no-properties (line-beginning-position) (line-end-position))))))))
(safe-delete-dir tmp-dir t)))
